// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fileformat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fileformat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace OSMPBF {
class BlobDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Blob> {};
BlobDefaultTypeInternal _Blob_default_instance_;
class BlobHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlobHeader> {};
BlobHeaderDefaultTypeInternal _BlobHeader_default_instance_;

void protobuf_ShutdownFile_fileformat_2eproto() {
  _Blob_default_instance_.Shutdown();
  _BlobHeader_default_instance_.Shutdown();
}

void protobuf_InitDefaults_fileformat_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Blob_default_instance_.DefaultConstruct();
  _BlobHeader_default_instance_.DefaultConstruct();
}

void protobuf_InitDefaults_fileformat_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_fileformat_2eproto_impl);
}
void protobuf_AddDesc_fileformat_2eproto_impl() {
  protobuf_InitDefaults_fileformat_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fileformat_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_fileformat_2eproto_once_);
void protobuf_AddDesc_fileformat_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_fileformat_2eproto_once_,
                 &protobuf_AddDesc_fileformat_2eproto_impl);
}
#ifndef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fileformat_2eproto {
  StaticDescriptorInitializer_fileformat_2eproto() {
    protobuf_AddDesc_fileformat_2eproto();
  }
} static_descriptor_initializer_fileformat_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Blob::kRawFieldNumber;
const int Blob::kRawSizeFieldNumber;
const int Blob::kZlibDataFieldNumber;
const int Blob::kLzmaDataFieldNumber;
const int Blob::kOBSOLETEBzip2DataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Blob::Blob()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_fileformat_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OSMPBF.Blob)
}
Blob::Blob(const Blob& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw()) {
    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  zlib_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_zlib_data()) {
    zlib_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zlib_data_);
  }
  lzma_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lzma_data()) {
    lzma_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lzma_data_);
  }
  obsolete_bzip2_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_obsolete_bzip2_data()) {
    obsolete_bzip2_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obsolete_bzip2_data_);
  }
  raw_size_ = from.raw_size_;
  // @@protoc_insertion_point(copy_constructor:OSMPBF.Blob)
}

void Blob::SharedCtor() {
  _cached_size_ = 0;
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zlib_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lzma_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obsolete_bzip2_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_size_ = 0;
}

Blob::~Blob() {
  // @@protoc_insertion_point(destructor:OSMPBF.Blob)
  SharedDtor();
}

void Blob::SharedDtor() {
  raw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zlib_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lzma_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obsolete_bzip2_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Blob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Blob& Blob::default_instance() {
  protobuf_InitDefaults_fileformat_2eproto();
  return *internal_default_instance();
}

Blob* Blob::New(::google::protobuf::Arena* arena) const {
  Blob* n = new Blob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Blob::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.Blob)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_raw()) {
      GOOGLE_DCHECK(!raw_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*raw_.UnsafeRawStringPointer())->clear();
    }
    if (has_zlib_data()) {
      GOOGLE_DCHECK(!zlib_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*zlib_data_.UnsafeRawStringPointer())->clear();
    }
    if (has_lzma_data()) {
      GOOGLE_DCHECK(!lzma_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lzma_data_.UnsafeRawStringPointer())->clear();
    }
    if (has_obsolete_bzip2_data()) {
      GOOGLE_DCHECK(!obsolete_bzip2_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*obsolete_bzip2_data_.UnsafeRawStringPointer())->clear();
    }
  }
  raw_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Blob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:OSMPBF.Blob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes raw = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 raw_size = 2;
      case 2: {
        if (tag == 16u) {
          set_has_raw_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raw_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes zlib_data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_zlib_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes lzma_data = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lzma_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_obsolete_bzip2_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OSMPBF.Blob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OSMPBF.Blob)
  return false;
#undef DO_
}

void Blob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OSMPBF.Blob)
  // optional bytes raw = 1;
  if (has_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->raw(), output);
  }

  // optional int32 raw_size = 2;
  if (has_raw_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->raw_size(), output);
  }

  // optional bytes zlib_data = 3;
  if (has_zlib_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->zlib_data(), output);
  }

  // optional bytes lzma_data = 4;
  if (has_lzma_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->lzma_data(), output);
  }

  // optional bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
  if (has_obsolete_bzip2_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->obsolete_bzip2_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:OSMPBF.Blob)
}

size_t Blob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.Blob)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes raw = 1;
    if (has_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw());
    }

    // optional bytes zlib_data = 3;
    if (has_zlib_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->zlib_data());
    }

    // optional bytes lzma_data = 4;
    if (has_lzma_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lzma_data());
    }

    // optional bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
    if (has_obsolete_bzip2_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->obsolete_bzip2_data());
    }

    // optional int32 raw_size = 2;
    if (has_raw_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raw_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Blob::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Blob*>(&from));
}

void Blob::MergeFrom(const Blob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.Blob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_raw()) {
      set_has_raw();
      raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
    }
    if (from.has_zlib_data()) {
      set_has_zlib_data();
      zlib_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zlib_data_);
    }
    if (from.has_lzma_data()) {
      set_has_lzma_data();
      lzma_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lzma_data_);
    }
    if (from.has_obsolete_bzip2_data()) {
      set_has_obsolete_bzip2_data();
      obsolete_bzip2_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obsolete_bzip2_data_);
    }
    if (from.has_raw_size()) {
      set_raw_size(from.raw_size());
    }
  }
}

void Blob::CopyFrom(const Blob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.Blob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Blob::IsInitialized() const {
  return true;
}

void Blob::Swap(Blob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Blob::InternalSwap(Blob* other) {
  raw_.Swap(&other->raw_);
  zlib_data_.Swap(&other->zlib_data_);
  lzma_data_.Swap(&other->lzma_data_);
  obsolete_bzip2_data_.Swap(&other->obsolete_bzip2_data_);
  std::swap(raw_size_, other->raw_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Blob::GetTypeName() const {
  return "OSMPBF.Blob";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Blob

// optional bytes raw = 1;
bool Blob::has_raw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Blob::set_has_raw() {
  _has_bits_[0] |= 0x00000001u;
}
void Blob::clear_has_raw() {
  _has_bits_[0] &= ~0x00000001u;
}
void Blob::clear_raw() {
  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw();
}
const ::std::string& Blob::raw() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.raw)
  return raw_.GetNoArena();
}
void Blob::set_raw(const ::std::string& value) {
  set_has_raw();
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.raw)
}
#if LANG_CXX11
void Blob::set_raw(::std::string&& value) {
  set_has_raw();
  raw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.Blob.raw)
}
#endif
void Blob::set_raw(const char* value) {
  set_has_raw();
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.Blob.raw)
}
void Blob::set_raw(const void* value, size_t size) {
  set_has_raw();
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.Blob.raw)
}
::std::string* Blob::mutable_raw() {
  set_has_raw();
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.raw)
  return raw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Blob::release_raw() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.raw)
  clear_has_raw();
  return raw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Blob::set_allocated_raw(::std::string* raw) {
  if (raw != NULL) {
    set_has_raw();
  } else {
    clear_has_raw();
  }
  raw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw);
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.raw)
}

// optional int32 raw_size = 2;
bool Blob::has_raw_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Blob::set_has_raw_size() {
  _has_bits_[0] |= 0x00000010u;
}
void Blob::clear_has_raw_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void Blob::clear_raw_size() {
  raw_size_ = 0;
  clear_has_raw_size();
}
::google::protobuf::int32 Blob::raw_size() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.raw_size)
  return raw_size_;
}
void Blob::set_raw_size(::google::protobuf::int32 value) {
  set_has_raw_size();
  raw_size_ = value;
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.raw_size)
}

// optional bytes zlib_data = 3;
bool Blob::has_zlib_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Blob::set_has_zlib_data() {
  _has_bits_[0] |= 0x00000002u;
}
void Blob::clear_has_zlib_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void Blob::clear_zlib_data() {
  zlib_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zlib_data();
}
const ::std::string& Blob::zlib_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.zlib_data)
  return zlib_data_.GetNoArena();
}
void Blob::set_zlib_data(const ::std::string& value) {
  set_has_zlib_data();
  zlib_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.zlib_data)
}
#if LANG_CXX11
void Blob::set_zlib_data(::std::string&& value) {
  set_has_zlib_data();
  zlib_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.Blob.zlib_data)
}
#endif
void Blob::set_zlib_data(const char* value) {
  set_has_zlib_data();
  zlib_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.Blob.zlib_data)
}
void Blob::set_zlib_data(const void* value, size_t size) {
  set_has_zlib_data();
  zlib_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.Blob.zlib_data)
}
::std::string* Blob::mutable_zlib_data() {
  set_has_zlib_data();
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.zlib_data)
  return zlib_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Blob::release_zlib_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.zlib_data)
  clear_has_zlib_data();
  return zlib_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Blob::set_allocated_zlib_data(::std::string* zlib_data) {
  if (zlib_data != NULL) {
    set_has_zlib_data();
  } else {
    clear_has_zlib_data();
  }
  zlib_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zlib_data);
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.zlib_data)
}

// optional bytes lzma_data = 4;
bool Blob::has_lzma_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Blob::set_has_lzma_data() {
  _has_bits_[0] |= 0x00000004u;
}
void Blob::clear_has_lzma_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void Blob::clear_lzma_data() {
  lzma_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lzma_data();
}
const ::std::string& Blob::lzma_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.lzma_data)
  return lzma_data_.GetNoArena();
}
void Blob::set_lzma_data(const ::std::string& value) {
  set_has_lzma_data();
  lzma_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.lzma_data)
}
#if LANG_CXX11
void Blob::set_lzma_data(::std::string&& value) {
  set_has_lzma_data();
  lzma_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.Blob.lzma_data)
}
#endif
void Blob::set_lzma_data(const char* value) {
  set_has_lzma_data();
  lzma_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.Blob.lzma_data)
}
void Blob::set_lzma_data(const void* value, size_t size) {
  set_has_lzma_data();
  lzma_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.Blob.lzma_data)
}
::std::string* Blob::mutable_lzma_data() {
  set_has_lzma_data();
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.lzma_data)
  return lzma_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Blob::release_lzma_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.lzma_data)
  clear_has_lzma_data();
  return lzma_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Blob::set_allocated_lzma_data(::std::string* lzma_data) {
  if (lzma_data != NULL) {
    set_has_lzma_data();
  } else {
    clear_has_lzma_data();
  }
  lzma_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lzma_data);
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.lzma_data)
}

// optional bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
bool Blob::has_obsolete_bzip2_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Blob::set_has_obsolete_bzip2_data() {
  _has_bits_[0] |= 0x00000008u;
}
void Blob::clear_has_obsolete_bzip2_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void Blob::clear_obsolete_bzip2_data() {
  obsolete_bzip2_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obsolete_bzip2_data();
}
const ::std::string& Blob::obsolete_bzip2_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.OBSOLETE_bzip2_data)
  return obsolete_bzip2_data_.GetNoArena();
}
void Blob::set_obsolete_bzip2_data(const ::std::string& value) {
  set_has_obsolete_bzip2_data();
  obsolete_bzip2_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.OBSOLETE_bzip2_data)
}
#if LANG_CXX11
void Blob::set_obsolete_bzip2_data(::std::string&& value) {
  set_has_obsolete_bzip2_data();
  obsolete_bzip2_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.Blob.OBSOLETE_bzip2_data)
}
#endif
void Blob::set_obsolete_bzip2_data(const char* value) {
  set_has_obsolete_bzip2_data();
  obsolete_bzip2_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.Blob.OBSOLETE_bzip2_data)
}
void Blob::set_obsolete_bzip2_data(const void* value, size_t size) {
  set_has_obsolete_bzip2_data();
  obsolete_bzip2_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.Blob.OBSOLETE_bzip2_data)
}
::std::string* Blob::mutable_obsolete_bzip2_data() {
  set_has_obsolete_bzip2_data();
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.OBSOLETE_bzip2_data)
  return obsolete_bzip2_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Blob::release_obsolete_bzip2_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.OBSOLETE_bzip2_data)
  clear_has_obsolete_bzip2_data();
  return obsolete_bzip2_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Blob::set_allocated_obsolete_bzip2_data(::std::string* obsolete_bzip2_data) {
  if (obsolete_bzip2_data != NULL) {
    set_has_obsolete_bzip2_data();
  } else {
    clear_has_obsolete_bzip2_data();
  }
  obsolete_bzip2_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obsolete_bzip2_data);
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.OBSOLETE_bzip2_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobHeader::kTypeFieldNumber;
const int BlobHeader::kIndexdataFieldNumber;
const int BlobHeader::kDatasizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobHeader::BlobHeader()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_fileformat_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OSMPBF.BlobHeader)
}
BlobHeader::BlobHeader(const BlobHeader& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  indexdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_indexdata()) {
    indexdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indexdata_);
  }
  datasize_ = from.datasize_;
  // @@protoc_insertion_point(copy_constructor:OSMPBF.BlobHeader)
}

void BlobHeader::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indexdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datasize_ = 0;
}

BlobHeader::~BlobHeader() {
  // @@protoc_insertion_point(destructor:OSMPBF.BlobHeader)
  SharedDtor();
}

void BlobHeader::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indexdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlobHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BlobHeader& BlobHeader::default_instance() {
  protobuf_InitDefaults_fileformat_2eproto();
  return *internal_default_instance();
}

BlobHeader* BlobHeader::New(::google::protobuf::Arena* arena) const {
  BlobHeader* n = new BlobHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.BlobHeader)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (has_indexdata()) {
      GOOGLE_DCHECK(!indexdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*indexdata_.UnsafeRawStringPointer())->clear();
    }
  }
  datasize_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:OSMPBF.BlobHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes indexdata = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indexdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 datasize = 3;
      case 3: {
        if (tag == 24u) {
          set_has_datasize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datasize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OSMPBF.BlobHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OSMPBF.BlobHeader)
  return false;
#undef DO_
}

void BlobHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OSMPBF.BlobHeader)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional bytes indexdata = 2;
  if (has_indexdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->indexdata(), output);
  }

  // required int32 datasize = 3;
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->datasize(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:OSMPBF.BlobHeader)
}

size_t BlobHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:OSMPBF.BlobHeader)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_datasize()) {
    // required int32 datasize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datasize());
  }

  return total_size;
}
size_t BlobHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.BlobHeader)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required int32 datasize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datasize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes indexdata = 2;
  if (has_indexdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->indexdata());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BlobHeader*>(&from));
}

void BlobHeader::MergeFrom(const BlobHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.BlobHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_indexdata()) {
      set_has_indexdata();
      indexdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indexdata_);
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
  }
}

void BlobHeader::CopyFrom(const BlobHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.BlobHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void BlobHeader::Swap(BlobHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobHeader::InternalSwap(BlobHeader* other) {
  type_.Swap(&other->type_);
  indexdata_.Swap(&other->indexdata_);
  std::swap(datasize_, other->datasize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BlobHeader::GetTypeName() const {
  return "OSMPBF.BlobHeader";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobHeader

// required string type = 1;
bool BlobHeader::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobHeader::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobHeader::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobHeader::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& BlobHeader::type() const {
  // @@protoc_insertion_point(field_get:OSMPBF.BlobHeader.type)
  return type_.GetNoArena();
}
void BlobHeader::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.BlobHeader.type)
}
#if LANG_CXX11
void BlobHeader::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.BlobHeader.type)
}
#endif
void BlobHeader::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.BlobHeader.type)
}
void BlobHeader::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.BlobHeader.type)
}
::std::string* BlobHeader::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:OSMPBF.BlobHeader.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlobHeader::release_type() {
  // @@protoc_insertion_point(field_release:OSMPBF.BlobHeader.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlobHeader::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.BlobHeader.type)
}

// optional bytes indexdata = 2;
bool BlobHeader::has_indexdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlobHeader::set_has_indexdata() {
  _has_bits_[0] |= 0x00000002u;
}
void BlobHeader::clear_has_indexdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlobHeader::clear_indexdata() {
  indexdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_indexdata();
}
const ::std::string& BlobHeader::indexdata() const {
  // @@protoc_insertion_point(field_get:OSMPBF.BlobHeader.indexdata)
  return indexdata_.GetNoArena();
}
void BlobHeader::set_indexdata(const ::std::string& value) {
  set_has_indexdata();
  indexdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.BlobHeader.indexdata)
}
#if LANG_CXX11
void BlobHeader::set_indexdata(::std::string&& value) {
  set_has_indexdata();
  indexdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.BlobHeader.indexdata)
}
#endif
void BlobHeader::set_indexdata(const char* value) {
  set_has_indexdata();
  indexdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.BlobHeader.indexdata)
}
void BlobHeader::set_indexdata(const void* value, size_t size) {
  set_has_indexdata();
  indexdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.BlobHeader.indexdata)
}
::std::string* BlobHeader::mutable_indexdata() {
  set_has_indexdata();
  // @@protoc_insertion_point(field_mutable:OSMPBF.BlobHeader.indexdata)
  return indexdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlobHeader::release_indexdata() {
  // @@protoc_insertion_point(field_release:OSMPBF.BlobHeader.indexdata)
  clear_has_indexdata();
  return indexdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlobHeader::set_allocated_indexdata(::std::string* indexdata) {
  if (indexdata != NULL) {
    set_has_indexdata();
  } else {
    clear_has_indexdata();
  }
  indexdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indexdata);
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.BlobHeader.indexdata)
}

// required int32 datasize = 3;
bool BlobHeader::has_datasize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlobHeader::set_has_datasize() {
  _has_bits_[0] |= 0x00000004u;
}
void BlobHeader::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlobHeader::clear_datasize() {
  datasize_ = 0;
  clear_has_datasize();
}
::google::protobuf::int32 BlobHeader::datasize() const {
  // @@protoc_insertion_point(field_get:OSMPBF.BlobHeader.datasize)
  return datasize_;
}
void BlobHeader::set_datasize(::google::protobuf::int32 value) {
  set_has_datasize();
  datasize_ = value;
  // @@protoc_insertion_point(field_set:OSMPBF.BlobHeader.datasize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace OSMPBF

// @@protoc_insertion_point(global_scope)
